@model DogRallyMVC.Models.TrackExerciseViewModelDTO

@{
    ViewData["Title"] = "UpdateTrack";
}
<br />
<h1>Redigér bane</h1>
<br />
<style>
    #canvas-container {
        position: relative;
    }

    #dogTrainingCanvas {
        background-image: url('/images/track.png');
        background-size: 100% 100%;
        border: 2px solid black;
    }
</style>

<div id="canvas-container">
    <canvas id="dogTrainingCanvas" width="1295" height="600"></canvas>
</div>


<script>

    @* Cast model exercises to json object *@
                var exercises = @Html.Raw(Json.Serialize(Model.Exercises.Select(e => new
        {
            e.ExerciseID,
            x = e.ExercisePositionX,
            y = e.ExercisePositionY,
            illustrationPath = e.ExerciseIllustrationPath
        })));

    var canvas = document.getElementById('dogTrainingCanvas');
    var ctx = canvas.getContext('2d');

    exercises.forEach(function (exercise) {
        var img = new Image();
        img.onload = function () {
            console.log("Indlæst billede for øvelse: ", exercise.ExerciseID); 
            exercise.image = img;
            drawExercise(exercise);
        };
        img.onerror = function () {
            console.error("Kunne ikke indlæse billede: ", exercise.illustrationPath); 
        };
        img.src = exercise.illustrationPath; 
    });

    function drawExercise(exercise) {
        ctx.drawImage(exercise.image, exercise.x, exercise.y, 50, 50); 
    }

    var draggedExercise = null;

    canvas.addEventListener('mousedown', function (e) {
        exercises.forEach(function (exercise, index) {
            if (e.offsetX >= exercise.x && e.offsetX <= exercise.x + 50 && e.offsetY >= exercise.y && e.offsetY <= exercise.y + 50) {
                draggedExercise = { ...exercise, index: index };
            }
        });
    });

    canvas.addEventListener('mousemove', function (e) {
        if (draggedExercise) {
            draggedExercise.x = e.offsetX - 25; // Centre the picture under the cursor
            draggedExercise.y = e.offsetY - 25;

            // Update relevant indput fields
            var posXField = document.getElementById('exercisePosX_' + draggedExercise.index);
            var posYField = document.getElementById('exercisePosY_' + draggedExercise.index);
            if (posXField && posYField) {
                posXField.value = draggedExercise.x;
                posYField.value = draggedExercise.y;
            }

            // Update position in exercise array
            exercises[draggedExercise.index] = draggedExercise;

            redrawCanvas();
        }
    });

    canvas.addEventListener('mouseup', function () {
        draggedExercise = null;
    });


    function redrawCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear Canvas
        exercises.forEach(drawExercise); // Redraw all exercises
    }
</script>


<div class="row">
    <div class="col-md-4">
        <form asp-action="UpdateTrack">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Input fields for User -->
            <div class="form-group">
                <input type="hidden" asp-for="@Model.Track.UserID" />
                <span asp-validation-for="@Model.Track.UserID" class="text-danger"></span>
            </div>


            <!-- Input fields for Track -->
            <div class="form-group">
                <label asp-for="@Model.Track.TrackName" class="control-label">Banenavn</label>
                <input asp-for="@Model.Track.TrackName" class="form-control" />
                <span asp-validation-for="@Model.Track.TrackName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Track.TrackDate" class="control-label">Banedato</label>
                <input asp-for="@Model.Track.TrackDate" class="form-control" />
                <span asp-validation-for="@Model.Track.TrackDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="hidden" asp-for="@Model.Track.TrackID" />
                <span asp-validation-for="@Model.Track.TrackID" class="text-danger"></span>
            </div>


            <!-- Input fields for every exercise -->
            @for (int i = 0; i < Model.Exercises.Count; i++)
            {
                <div class="form-group">
                    <input type="hidden" asp-for="Exercises[i].ExerciseID" />
                    <span asp-validation-for="Exercises[i].ExerciseID" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <input type="hidden" id="exercisePosX_@i" asp-for="Exercises[i].ExercisePositionX" />
                    <span asp-validation-for="Exercises[i].ExercisePositionX" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <input type="hidden" id="exercisePosY_@i" asp-for="Exercises[i].ExercisePositionY" />
                    <span asp-validation-for="Exercises[i].ExercisePositionY" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <input type="hidden" asp-for="Exercises[i].ExerciseIllustrationPath" />
                    <span asp-validation-for="Exercises[i].ExerciseIllustrationPath" class="text-danger"></span>
                </div>
            }

         
            <br />
            <div class="form-group">
                <input type="submit" value="Gem ændringer" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<br />

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}